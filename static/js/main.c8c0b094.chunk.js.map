{"version":3,"sources":["components/Slots.js","firebase.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["am_Slots","pm_Slots","Slots","setSelectedTime","handleClickAm","e","copyTime","target","innerHTML","handleClickPm","className","map","val","onClick","fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Form","useState","selectedDate","setSelectedDate","errorMessage","setErrorMessage","selectedTime","selected","onChange","tempDate","date","Date","console","log","toLocaleDateString","parse","minDate","filterDate","getDay","isClearable","showYearDropdown","scrollableMonthYearDropdown","obj","dateTime","replace","child","on","snapshot","flag","arr","Object","keys","i","length","push","err","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8c0b094.chunk.js","sourcesContent":["import React,{ useState } from 'react'\r\nimport './Slots.css'\r\n\r\nconst am_Slots = [\"10:00:00\",\"11:00:00\"]\r\nconst pm_Slots = [\"12:00:00\",\"01:00:00\",\"02:00:00\",\"03:00:00\",\"04:00:00\"]\r\n\r\nfunction Slots({ setSelectedTime }) {\r\n\r\n    function handleClickAm(e){\r\n        const copyTime = e.target.innerHTML+\"AM\"\r\n        setSelectedTime(copyTime)\r\n\r\n    }\r\n\r\n    function handleClickPm(e){\r\n        const copyTime = e.target.innerHTML+\"PM\"\r\n        setSelectedTime(copyTime)\r\n    }\r\n\r\n    return (\r\n        <div className=\"slotZone\">\r\n            <div className=\"AM\">AM:<br/>\r\n            {\r\n                am_Slots.map(val=>(\r\n                <div className=\"slots\" onClick={handleClickAm} >{val}</div>\r\n                ))\r\n            }</div>\r\n            <div className=\"PM\">PM:<br/>\r\n            {\r\n                pm_Slots.map(val=>(\r\n                <div className=\"slots\" onClick={handleClickPm} >{val}</div>\r\n                ))\r\n            \r\n            }</div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Slots\r\n","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCNC-kYjRGCvSxgNqGz0Rcm1rPuH2afsSE\",\r\n    authDomain: \"slot-booking-2337e.firebaseapp.com\",\r\n    databaseURL: \"https://slot-booking-2337e-default-rtdb.firebaseio.com\",\r\n    projectId: \"slot-booking-2337e\",\r\n    storageBucket: \"slot-booking-2337e.appspot.com\",\r\n    messagingSenderId: \"951963907429\",\r\n    appId: \"1:951963907429:web:e23b769230c12c65389d8c\"\r\n  };\r\n// Initialize Firebase\r\nconst fireDb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fireDb.database().ref();","import React, { useRef, useState } from 'react'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport Slots from './Slots'\r\nimport './Form.css'\r\nimport fireDb from '../firebase.js'\r\n\r\nfunction Form() {\r\n    const [selectedDate, setSelectedDate] = useState(null)\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [selectedTime, setSelectedTime] = useState(null)\r\n\r\n    function handleChange(e){\r\n        const tempDate = e\r\n        const date = new Date()\r\n        console.log(tempDate,date.toLocaleDateString(),Date.parse(tempDate) >= Date.parse(date.toLocaleDateString()))\r\n        if (Date.parse(tempDate) > Date.parse(date.toLocaleDateString())){\r\n            setSelectedDate(tempDate)\r\n            setErrorMessage(\"\")\r\n        }else{\r\n            setSelectedDate(null)\r\n            setErrorMessage(\"Date not available\")\r\n        }\r\n    }\r\n\r\n    function addToDb(){\r\n        if(selectedTime == null){\r\n            setErrorMessage(\"plz select slot time\")\r\n            return\r\n        }\r\n        const dateTime = `${selectedDate.toLocaleDateString().replace(\"/\",\"-\").replace(\"/\",\"-\")}T${selectedTime}`\r\n        let obj;\r\n\r\n        fireDb.child('bookings').on('value',snapshot=>{\r\n            if (snapshot.val()!=null){\r\n                obj = snapshot.val()\r\n            }\r\n            \r\n        })\r\n        let flag = true\r\n        if (obj){\r\n            const arr = Object.keys(obj)\r\n            for (let i=0; i<arr.length;i++ ){\r\n                if (obj[arr[i]] === dateTime){\r\n                    flag = false\r\n                    setErrorMessage(\"Slot is already booked, try another slot\")\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        \r\n        // console.log(arr)\r\n        \r\n        if (flag){\r\n            fireDb.child('bookings').push(dateTime,err=>{\r\n                console.log(err)\r\n            })\r\n            setErrorMessage(\"Slot is succefully booked\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"Form\">\r\n        <div>\r\n            {\"Appointment Date:\"}\r\n            <DatePicker\r\n            className=\"date\" \r\n            selected={selectedDate} \r\n            onChange={handleChange}\r\n            minDate={new Date()} \r\n            filterDate={date => date.getDay()!== 6 && date.getDay()!==0}\r\n            isClearable\r\n            showYearDropdown\r\n            scrollableMonthYearDropdown\r\n            /><br/>\r\n            {selectedDate ? (\r\n                <button className=\"btn\" onClick={addToDb} >Select Slot</button>\r\n            ):(null)}\r\n        </div>\r\n            <div className=\"error\" >{errorMessage}</div>\r\n            {selectedDate ? (\r\n                <Slots setSelectedTime={setSelectedTime}/>\r\n            ):(null)}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import './App.css';\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}